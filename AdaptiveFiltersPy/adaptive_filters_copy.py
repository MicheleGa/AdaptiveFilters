"""
Adaptive Filters Example
========================

In this example, we will run adaptive filters for system identification.
"""
from __future__ import division, print_function

import numpy as np 
from scipy.signal import fftconvolve
import math
import matplotlib.pyplot as plt
import pyroomacoustics as pra


# parameters
length = 15  # the unknown filter length
n_samples = 256  # the number of samples to run
SNR = 15  # signal to noise ratio

# the unknown filter (unit norm)
w = [-2.0069, -0.0119, -0.5283, 0.3126, -0.1675, 0.1251, -1.6945, -0.1994, 1.1193, 0.446, -0.5666, -0.034, -0.4912, 0.4749, -0.9086]

print(w)

norm_2 = 0

for el in w:
    norm_2 += el * el

norm_2 = np.sqrt(norm_2)
print(norm_2)

for i in range(len(w)):
    w[i] /= norm_2

print(w)
w_norm = [-0.6215, -0.0037, -0.1636, 0.0968, -0.0519, 0.0388, -0.5248, -0.0618, 0.3467, 0.1381, -0.1755, -0.0105, -0.1521, 0.1471, -0.2814]
print(w_norm)

# create a known driving signal
x = [1.9338, 0.2308, -1.2403, -0.4824, 0.3057, -1.3636, 0.1283, 0.1622, -1.6333, 1.0004, -0.2576, 1.3717, 0.9845, -1.5311, 1.6497, 1.3714, -1.1761, -0.9655, 0.0619, 0.2469, 0.2771, -0.0794, -0.9402, 0.7757, -0.0331, 0.6773, -0.6472, 0.5362, -1.5396, -0.7655, 1.4293, -0.1557, 1.5644, 0.2635, -0.6495, -1.8227, 0.0532, -0.7155, -0.8944, 0.0559, 0.0692, 1.0744, 0.4447, -0.3795, 0.4191, -1.0641, -0.5945, 0.3374, -0.715, 0.4451, -1.6511, 0.2269, 0.0881, -0.166, 0.2354, -0.5881, 0.3849, -1.1154, -0.8245, -0.0818, 0.5001, -0.3545, 2.0486, 1.9973, 1.1902, 0.7368, 1.2304, 0.7065, -0.5001, -0.086, -0.5537, 0.6886, 0.8519, 1.0897, -0.9282, 0.8266, 1.7055, 1.1453, 0.0069, -0.6026, -1.4781, -0.387, -1.1224, 0.8457, 1.9096, 0.4048, -0.4424, -0.6002, 1.4628, 0.1433, -0.9419, -0.6271, -0.1247, 0.2536, -0.9837, -0.4439, 0.8428, -0.9725, -0.1941, -1.5636, -1.0098, 0.1066, 1.3153, -0.1259, -0.2771, -0.7136, 0.4697, -1.1217, -0.9826, 0.017, -1.5256, -1.9805, 1.1078, -1.8037, -0.2097, -0.3079, 1.0646, -1.1311, 0.3921, -0.7641, 0.8561, 0.3955, -1.5108, -0.16, 1.1609, -0.2114, 0.0727, -0.6344, 0.9501, 0.1664, -0.3002, -0.632, 0.7758, -0.7682, -0.1479, -0.0906, 0.9389, -0.797, -1.588, 1.2092, -1.494, 1.4533, 0.6176, -1.0338, -0.5543, 0.6785, 0.0762, -1.0157, 1.2271, 0.633, 0.426, 0.9811, -0.1028, 1.7903, 0.024, -0.8576, 0.2028, 0.5221, 0.8721, 1.7174, -0.2632, 0.3242, 1.1945, 1.2061, -1.1018, 0.1946, -0.5457, 0.7734, 1.7321, 1.6849, -0.4467, -1.0006, -0.1607, 0.4993, -1.3151, 0.1483, 0.6805, -0.0608, 1.7864, -0.4845, 1.0852, -0.3625, -0.0115, 0.0938, -1.0459, 1.1269, 0.3527, -0.6567, 1.1063, -0.2279, 1.2788, 1.2259, 0.8646, -1.029, -0.7924, 0.0919, -0.7935, -0.423, -0.9154, 0.8503, 0.0719, -0.4489, 0.08, -0.2492, 0.8621, -0.2459, 0.4048, 1.0513, -0.145, -0.1131, -0.2038, 0.3489, -0.1104, -1.2086, 2.1944, 0.2915, 0.7383, 0.413, 0.7351, 0.6735, 2.0618, -0.097, -0.2357, 2.1618, 0.104, -0.4147, 0.5988, -1.8618, -1.8052, -0.1761, 1.0259, 0.2807, 0.5776, 0.9995, -0.0267, 0.0145, 0.9954, 0.4349, 0.9271, 1.6509, 0.0283, -0.2665, -0.8225, 0.5116, -1.6485, 0.3697, 0.387, -0.1751, 1.7117, 0.2693, 0.8245, -1.8023, -1.0077, 0.0217, -0.3984, -0.8067]

x = x[:n_samples]
print(len(x))
# convolve with the unknown filter
d_clean = fftconvolve(x, w)[:n_samples]
""" for el in range(len(d_clean)):
    print(d_clean[el]) """

# add some noise to the reference signal
d = d_clean + np.random.randn(n_samples) * 10 ** (-SNR / 20.0)

# create a bunch adaptive filters
# filter=pra.adaptive.RLS(length, lmbd=1.0, delta=2.0)
filter=pra.adaptive.NLMS(length, mu=0.5)
error=np.zeros(n_samples)

for i in range(n_samples):
    filter.update(x[i], d[i])
    error[i] = np.linalg.norm(filter.w - w)


""" plt.plot(w)
for algo in adfilt.values():
    plt.plot(algo["filter"].w)
plt.title("Original and reconstructed filters")
plt.legend(["groundtruth"] + list(adfilt))

plt.figure()
for algo in adfilt.values():
    plt.semilogy(algo["error"])
plt.legend(adfilt)
plt.title("Convergence to unknown filter")
plt.show() """
